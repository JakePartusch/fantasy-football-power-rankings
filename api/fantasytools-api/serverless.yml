service: fantasy-tools-api
app: fantasy-tools
org: jakepartusch

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  environment:
    AUTH0_CLIENT_ID: ${file(./src/config/config.${self:provider.stage}.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./src/config/fantasy-tools.${self:provider.stage}.pem)}
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'

functions:
  addEmail:
    handler: src/handler.addEmail
    events:
      - http:
          path: /user/email
          method: post
  userSignup:
    handler: src/handler.createUser
    events:
      - http:
          path: /user
          method: post
  syncAccount:
    handler: src/handler.syncAccount
    events:
      - http:
          path: /user/accountSync
          method: post
          authorizer: authorizer
  fetchSyncedAccountAuthentication:
    handler: src/handler.fetchSyncedAccountAuthentication
    events:
      - http:
          path: /user/accountSync
          method: get
          authorizer: authorizer
  getUser:
    handler: src/handler.getUser
    events:
      - http:
          path: /user
          method: get
          authorizer: authorizer
  onboarding:
    handler: src/handler.onboarding
    events:
      - http:
          path: /user/onboarding
          method: post
          authorizer: authorizer
  fetchLeagueData:
    handler: src/handler.fetchLeague
    events:
      - http:
          path: /leagues/{leagueId}/{seasonId}
          method: get
          authorizer: authorizer
  fetchLeagues:
    handler: src/handler.fetchLeagues
    events:
      - http:
          path: /leagues
          method: get
          authorizer: authorizer
  authorizer:
    handler: src/handler.authorizer
resources:
  Resources:
    EmailTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
