{"version":3,"sources":["authentication/authorizer.js","user/addEmail.js","user/createUser.js","user/getUser.js","user/syncAccount.js","user/onboarding.js","user/index.js","authentication/fetchSyncedAccountAuthentication.js","authentication/index.js","league/fetchLeague.js","league/fetchLeagues.js","league/index.js","handler.js"],"names":["AUTH0_CLIENT_ID","process","env","AUTH0_CLIENT_PUBLIC_KEY","generatePolicy","principalId","email","policyDocument","Version","Statement","Action","Effect","Resource","context","id","authorizer","console","log","JSON","stringify","event","token","authorizationToken","replace","options","audience","parsedToken","Promise","resolve","reject","verify","error","decoded","policy","sub","e","Error","module","exports","dynamoDb","DynamoDB","DocumentClient","addEmail","put","TableName","USERS_TABLE","Item","promise","body","parse","statusCode","createUser","user","getUserByEmail","response","query","IndexName","ExpressionAttributeValues","KeyConditionExpression","Items","length","getUser","requestContext","kmsClient","KMS","loginToEspn","apiKeyResponse","apiKey","axios","post","headers","accept","authenticationResponse","loginValue","credentials","username","password","Authorization","syncAccount","params","KeyId","Plaintext","encryptedCredentials","encrypt","syncedAccount","CiphertextBlob","toString","onboarding","isOnboardingComplete","saveSession","sessionAttributes","item","session","lastUpdatedTimestamp","Date","toISOString","getSyncedAccountCookiesByEmail","credentialsBlob","decrypt","Buffer","from","data","swid","profile","s2","fetchSyncedAccountAuthentication","cookies","fetchLeague","leagueId","seasonId","cookieString","leagueResponse","get","Cookie","pathParameters","leagueData","fetchLeagues","leaguesResponse","leagues"],"mappings":"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","file":"handler.js","sourceRoot":"../src","sourcesContent":["import jwt from 'jsonwebtoken';\nconst AUTH0_CLIENT_ID = process.env.AUTH0_CLIENT_ID;\nconst AUTH0_CLIENT_PUBLIC_KEY = process.env.AUTH0_CLIENT_PUBLIC_KEY;\n\nconst generatePolicy = (principalId, email) => {\n  return {\n    principalId,\n    policyDocument: {\n      Version: '2012-10-17',\n      Statement: [\n        {\n          Action: 'execute-api:Invoke',\n          Effect: 'Allow',\n          Resource: '*'\n        }\n      ]\n    },\n    context: {\n      id: principalId,\n      email\n    }\n  };\n};\n\nconst authorizer = async event => {\n  try {\n    console.log(JSON.stringify(event, null, 2));\n    const token = event.authorizationToken.replace('Bearer ', '');\n    console.log(token);\n    const options = {\n      audience: AUTH0_CLIENT_ID\n    };\n    console.log(AUTH0_CLIENT_ID);\n    console.log(AUTH0_CLIENT_PUBLIC_KEY);\n    const parsedToken = await new Promise((resolve, reject) => {\n      jwt.verify(token, AUTH0_CLIENT_PUBLIC_KEY, options, (error, decoded) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(decoded);\n        }\n      });\n    });\n    console.log(JSON.stringify(parsedToken, null, 2));\n    const policy = generatePolicy(parsedToken.sub, parsedToken.email);\n    console.log(JSON.stringify(policy, null, 2));\n    return policy;\n  } catch (e) {\n    console.error(e);\n    throw new Error('Unauthorized');\n  }\n};\n\nmodule.exports.authorizer = authorizer;\n","import DynamoDB from 'aws-sdk/clients/dynamodb';\nimport uuidv4 from 'uuid/v4';\nconst dynamoDb = new DynamoDB.DocumentClient();\n\nconst addEmail = async email => {\n  await dynamoDb\n    .put({\n      TableName: process.env.USERS_TABLE,\n      Item: {\n        id: uuidv4(),\n        email\n      }\n    })\n    .promise();\n};\n\nmodule.exports.addEmail = async event => {\n  console.log(JSON.stringify(event, null, 2));\n  const { body } = event;\n  const { email } = JSON.parse(body);\n  if (!email) {\n    return {\n      statusCode: 400\n    };\n  }\n  await addEmail(email);\n  return {\n    statusCode: 201\n  };\n};\n","import DynamoDB from 'aws-sdk/clients/dynamodb';\nimport uuidv4 from 'uuid/v4';\nconst dynamoDb = new DynamoDB.DocumentClient();\n\nconst createUser = async user => {\n  await dynamoDb\n    .put({\n      TableName: process.env.USERS_TABLE,\n      Item: {\n        id: uuidv4(),\n        ...user\n      }\n    })\n    .promise();\n};\n\nmodule.exports.createUser = async event => {\n  console.log(JSON.stringify(event, null, 2));\n  const { body } = event;\n  const { user } = JSON.parse(body);\n  if (!user) {\n    return { statusCode: 400 };\n  }\n  await createUser(user);\n  return {\n    statusCode: 201\n  };\n};\n","import DynamoDB from 'aws-sdk/clients/dynamodb';\nconst dynamoDb = new DynamoDB.DocumentClient();\n\nconst getUserByEmail = async email => {\n  const response = await dynamoDb\n    .query({\n      TableName: process.env.USERS_TABLE,\n      IndexName: 'emailIndex',\n      ExpressionAttributeValues: {\n        ':email': email\n      },\n      KeyConditionExpression: 'email = :email'\n    })\n    .promise();\n  console.log(response);\n  if (response.Items.length === 0) {\n    throw new Error(\"User doesn't exist\", email);\n  }\n  return response.Items[0];\n};\n\nmodule.exports.getUser = async event => {\n  console.log(JSON.stringify(event));\n  console.log(JSON.stringify(event.requestContext.authorizer));\n  const { email } = event.requestContext.authorizer;\n  const user = await getUserByEmail(email);\n  console.log(JSON.stringify(user));\n  return {\n    statusCode: 200,\n    body: JSON.stringify(user)\n  };\n};\n\nmodule.exports.getUserByEmail = getUserByEmail;\n","import DynamoDB from 'aws-sdk/clients/dynamodb';\nimport KMS from 'aws-sdk/clients/kms';\nimport axios from 'axios';\nconst dynamoDb = new DynamoDB.DocumentClient();\nconst kmsClient = new KMS();\nimport { getUserByEmail } from './getUser';\n\nconst loginToEspn = async credentials => {\n  const apiKeyResponse = await axios.post(\n    'https://registerdisney.go.com/jgc/v6/client/ESPN-ONESITE.WEB-PROD/api-key?langPref=en-US',\n    null,\n    { headers: { accept: 'application/json' } }\n  );\n  const apiKey = apiKeyResponse.headers['api-key'];\n  const authenticationResponse = await axios.post(\n    'https://registerdisney.go.com/jgc/v6/client/ESPN-ONESITE.WEB-PROD/guest/login?langPref=en-US',\n    { loginValue: credentials.username, password: credentials.password },\n    { headers: { 'Content-Type': 'application/json', Authorization: `APIKEY ${apiKey}` } }\n  );\n  return authenticationResponse;\n};\n\nconst syncAccount = async (email, credentials) => {\n  const user = await getUserByEmail(email);\n  const credentialsString = JSON.stringify(credentials);\n  const params = {\n    KeyId: '5a138b9f-ba41-42c7-afda-e8c7c7ec9830',\n    Plaintext: credentialsString\n  };\n\n  const encryptedCredentials = await kmsClient.encrypt(params).promise();\n  user.syncedAccount = encryptedCredentials.CiphertextBlob.toString('base64');\n  await dynamoDb\n    .put({\n      TableName: process.env.USERS_TABLE,\n      Item: {\n        ...user\n      }\n    })\n    .promise();\n};\n\n//No logging to avoid storing credentials in plaintext\nmodule.exports.syncAccount = async event => {\n  const { body } = event;\n  const credentials = JSON.parse(body);\n  const { email } = event.requestContext.authorizer;\n  try {\n    await loginToEspn(credentials);\n  } catch (e) {\n    console.error('Unable to login with provided credentials', e);\n    return {\n      statusCode: 403\n    };\n  }\n  await syncAccount(email, credentials);\n  return {\n    statusCode: 200\n  };\n};\n","import DynamoDB from 'aws-sdk/clients/dynamodb';\nimport { getUserByEmail } from './getUser';\nconst dynamoDb = new DynamoDB.DocumentClient();\n\nconst onboarding = async email => {\n  const user = await getUserByEmail(email);\n  user.isOnboardingComplete = true;\n  await dynamoDb\n    .put({\n      TableName: process.env.USERS_TABLE,\n      Item: user\n    })\n    .promise();\n};\n\nmodule.exports.onboarding = async event => {\n  try {\n    console.log(JSON.stringify(event, null, 2));\n    const { email } = event.requestContext.authorizer;\n    await onboarding(email);\n    return {\n      statusCode: 200\n    };\n  } catch (e) {\n    console.error('Unable to update onboarding', e);\n    return {\n      statusCode: 500\n    };\n  }\n};\n","import { addEmail } from './addEmail';\nimport { createUser } from './createUser';\nimport { getUser, getUserByEmail } from './getUser';\nimport { syncAccount } from './syncAccount';\nimport { onboarding } from './onboarding';\n\nexport { addEmail, createUser, getUser, getUserByEmail, syncAccount, onboarding };\n","import KMS from 'aws-sdk/clients/kms';\nimport axios from 'axios';\nimport DynamoDB from 'aws-sdk/clients/dynamodb';\nimport { getUserByEmail } from '../user';\nconst kmsClient = new KMS();\nconst dynamoDb = new DynamoDB.DocumentClient();\n\nconst saveSession = async (user, sessionAttributes) => {\n  console.log('Saving Session', user, sessionAttributes);\n  const item = {\n    ...user,\n    session: {\n      ...sessionAttributes,\n      lastUpdatedTimestamp: new Date().toISOString()\n    }\n  };\n  console.log('Saving Item', item);\n  await dynamoDb\n    .put({\n      TableName: process.env.USERS_TABLE,\n      Item: item\n    })\n    .promise();\n  console.log('Item saved');\n};\n\nconst loginToEspn = async credentials => {\n  const apiKeyResponse = await axios.post(\n    'https://registerdisney.go.com/jgc/v6/client/ESPN-ONESITE.WEB-PROD/api-key?langPref=en-US',\n    null,\n    { headers: { accept: 'application/json' } }\n  );\n  const apiKey = apiKeyResponse.headers['api-key'];\n  const authenticationResponse = await axios.post(\n    'https://registerdisney.go.com/jgc/v6/client/ESPN-ONESITE.WEB-PROD/guest/login?langPref=en-US',\n    { loginValue: credentials.username, password: credentials.password },\n    { headers: { 'Content-Type': 'application/json', Authorization: `APIKEY ${apiKey}` } }\n  );\n  return authenticationResponse;\n};\n\nconst getSyncedAccountCookiesByEmail = async email => {\n  const user = await getUserByEmail(email);\n  if (user.session) {\n    console.log('Using cached Session');\n    return user.session;\n  }\n  const credentialsBlob = await kmsClient\n    .decrypt({\n      CiphertextBlob: Buffer.from(user.syncedAccount, 'base64')\n    })\n    .promise();\n  const credentials = JSON.parse(credentialsBlob.Plaintext.toString('ascii'));\n  const authenticationResponse = await loginToEspn(credentials);\n  console.log(JSON.stringify(authenticationResponse.data));\n  const sessionAttributes = {\n    swid: authenticationResponse.data.data.profile.swid,\n    s2: authenticationResponse.data.data.s2\n  };\n  await saveSession(user, sessionAttributes);\n  return sessionAttributes;\n};\n\nmodule.exports = {\n  fetchSyncedAccountAuthentication: async event => {\n    const { email } = event.requestContext.authorizer;\n    try {\n      const cookies = await getSyncedAccountCookiesByEmail(email);\n      return {\n        statusCode: 200,\n        body: JSON.stringify(cookies)\n      };\n    } catch (e) {\n      console.error('Unable to fetch auth data', e);\n      return {\n        statusCode: 500\n      };\n    }\n  },\n  getSyncedAccountCookiesByEmail,\n  loginToEspn\n};\n","import { authorizer } from './authorizer';\nimport {\n  fetchSyncedAccountAuthentication,\n  getSyncedAccountCookiesByEmail,\n  loginToEspn\n} from './fetchSyncedAccountAuthentication';\n\nexport {\n  authorizer,\n  fetchSyncedAccountAuthentication,\n  getSyncedAccountCookiesByEmail,\n  loginToEspn\n};\n","import axios from 'axios';\nimport { getSyncedAccountCookiesByEmail } from '../authentication';\n\nconst fetchLeague = async (email, leagueId, seasonId = '2019') => {\n  const { s2, swid } = await getSyncedAccountCookiesByEmail(email);\n  const cookieString = `espn_s2=${s2}; swid=${swid}`;\n  const leagueResponse = await axios.get(\n    `https://fantasy.espn.com/apis/v3/games/ffl/seasons/${seasonId}/segments/0/leagues/${leagueId}?view=mMatchupScore&view=mStatus&view=mSettings&view=mTeam&view=modular&view=mNav`,\n    { headers: { Cookie: cookieString } }\n  );\n  console.log(JSON.stringify(leagueResponse.data));\n  return leagueResponse.data;\n};\n\nmodule.exports.fetchLeague = async event => {\n  console.log(JSON.stringify(event));\n  const { email } = event.requestContext.authorizer;\n  const { leagueId, seasonId } = event.pathParameters;\n  const leagueData = await fetchLeague(email, leagueId, seasonId);\n  return {\n    statusCode: 200,\n    body: JSON.stringify(leagueData)\n  };\n};\n","import axios from 'axios';\nimport { getSyncedAccountCookiesByEmail } from '../authentication';\n\nconst fetchLeagues = async email => {\n  const { s2, swid } = await getSyncedAccountCookiesByEmail(email);\n  const cookieString = `espn_s2=${s2}; swid=${swid}`;\n  const leaguesResponse = await axios.get(`https://fan.api.espn.com/apis/v2/fans/${swid}`, {\n    headers: { Cookie: cookieString }\n  });\n  console.log(JSON.stringify(leaguesResponse.data));\n  return leaguesResponse.data;\n};\n\nmodule.exports.fetchLeagues = async event => {\n  console.log(JSON.stringify(event));\n  const { email } = event.requestContext.authorizer;\n  const leagues = await fetchLeagues(email);\n  return {\n    statusCode: 200,\n    body: JSON.stringify(leagues)\n  };\n};\n","import { fetchLeague } from './fetchLeague';\nimport { fetchLeagues } from './fetchLeagues';\n\nexport { fetchLeague, fetchLeagues };\n","import { authorizer, fetchSyncedAccountAuthentication, loginToEspn } from './authentication';\nimport { fetchLeague, fetchLeagues } from './league';\nimport { addEmail, createUser, getUser, syncAccount, onboarding } from './user';\n\nexport {\n  authorizer,\n  fetchSyncedAccountAuthentication,\n  loginToEspn,\n  fetchLeague,\n  fetchLeagues,\n  addEmail,\n  createUser,\n  getUser,\n  syncAccount,\n  onboarding\n};\n"]}